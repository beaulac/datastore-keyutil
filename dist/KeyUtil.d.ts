/// <reference types="google-cloud__datastore" />
import * as Datastore from '@google-cloud/datastore';
import { DatastoreInt, DatastoreKey, DatastoreKeyPath } from '@google-cloud/datastore/entity';
import { DatastoreKeylike } from './isKeylike';
import { DatastoreKeyExtractable } from './key.types';
import { KeyUtilOptions } from './KeyUtilOptions';
export declare class KeyUtil {
    private datastore;
    KEY_SYMBOL: symbol;
    private keyBuilder;
    private keyExtractor;
    private errorFn;
    constructor(datastore: Datastore, options?: Partial<KeyUtilOptions>);
    setKey<T>(entity: T, key: DatastoreKey): T;
    buildMixedKey: (keyPath: (string | number | DatastoreInt)[]) => DatastoreKey;
    buildKey: (keyPath: (string | number | DatastoreInt)[]) => DatastoreKey;
    buildNamedKey: (keyPath: (string | number | DatastoreInt)[]) => DatastoreKey;
    coerceKeylikeToKey: (keylike: DatastoreKeylike) => DatastoreKey;
    allocateKeys(keyPath: DatastoreKeyPath | DatastoreKeylike, count?: number): Promise<DatastoreKey | DatastoreKey[]>;
    extractKey: (entity: any) => DatastoreKey;
    mapToKeys: (es: any[]) => DatastoreKey[];
    extractParentKey: (entity: any) => DatastoreKey;
    mapToParentKeys: (es: any[]) => DatastoreKey[];
    idOf: (entity: any) => string;
    mapToIDs: (es: any[]) => string[];
    parentIdOf: (entity: any) => string;
    mapToParentIDs: (es: any[]) => string[];
    nameOf: (entity: any) => string;
    mapToNames: (es: any[]) => string[];
    parentNameOf: (entity: any) => string;
    mapToParentNames: (es: any[]) => string[];
    uidFor: (entity: any) => string;
    mapToUIDs: (es: any[]) => string[];
    parentUidFor: (entity: any) => string;
    mapToParentUIDs: (es: any[]) => string[];
    uidToKey: (uid: string) => DatastoreKey;
    base64UidFor: (entity: {}) => string;
    mapToBase64UIDs: (es: {}[]) => string[];
    base64ParentUIDFor: (entity: {}) => string;
    mapToBase64ParentUIDs: (es: {}[]) => string[];
    base64UidToKey: (base64UID: string) => DatastoreKey;
    haveSameKey: (entity: any, other: any) => boolean;
    hasId: (entity: any, id: string) => boolean;
    hasName: (entity: any, name: string) => boolean;
    indexById<E extends DatastoreKeyExtractable>(entity: E | E[]): [string, E] | [string, E][];
    private _doIndexById<E>(entity);
}
export declare type _DsInt = DatastoreInt;
